var _this=this;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var urlParse=require('url-parse');

var SALESFORCE_CALLBACK_URL='oauth-swift://oauth-callback/salesforce';
var OAUTH_GET_TOKEN_GRANT_TYPE='authorization_code';

var PARAMETER_DEFAULTS={
callbackUrl:SALESFORCE_CALLBACK_URL,
scope:'api refresh_token'};


function buildOAuth2LoginURL(parameters,state){
var urlParameters={
client_id:parameters.consumerKey,
redirect_uri:parameters.callbackUrl,
response_type:parameters.responseType,
scope:parameters.scope,
state:state};


var urlParametersStr=Object.
getOwnPropertyNames(urlParameters).
map(function(key){return key+'='+encodeURIComponent(urlParameters[key]);}).
join('&');

return parameters.authorizeUrl+'?'+urlParametersStr;
}

function fetchAccessToken(parameters,code){
var fetchParams={
client_secret:parameters.consumerSecret,
grant_type:OAUTH_GET_TOKEN_GRANT_TYPE,
code:code,
client_id:parameters.consumerKey,
redirect_uri:parameters.callbackUrl};

var form=Object.keys(fetchParams).map(function(k){return k+'='+encodeURIComponent(fetchParams[k]);}).join('&');

return fetch(parameters.accessTokenUrl,{
method:'post',
headers:{
'Accept':'application/json',
'Content-Type':'application/x-www-form-urlencoded; charset=utf-8'},

body:form});


}

module.exports=function(loginUser){
return function _callee(parameters){var parametersWithDefaults,state,webLoginURL,callbackUrl,parsed,oauthCode,fetchResult;return regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:

parametersWithDefaults=_extends({},parameters,PARAMETER_DEFAULTS);


state='00000000000000000000000000000000'.replace(/0/g,function(){return(0|Math.random()*16).toString(16);});


webLoginURL=buildOAuth2LoginURL(parametersWithDefaults,state);_context.next=5;return regeneratorRuntime.awrap(


loginUser(webLoginURL,parametersWithDefaults.callbackUrl));case 5:callbackUrl=_context.sent;

parsed=urlParse(callbackUrl,true);if(!(

parsed.query.state!==state)){_context.next=9;break;}throw(
new Error('OAuth2 response state does not match. Expected: '+state+', received: '+parsed.query.state));case 9:


oauthCode=parsed.query.code;if(

oauthCode){_context.next=12;break;}throw(
new Error('OAuth2 response has no code'));case 12:_context.next=14;return regeneratorRuntime.awrap(


fetchAccessToken(parametersWithDefaults,oauthCode));case 14:fetchResult=_context.sent;if(

fetchResult.ok){_context.next=17;break;}throw(
fetchResult);case 17:_context.next=19;return regeneratorRuntime.awrap(


fetchResult.json());case 19:return _context.abrupt('return',_context.sent);case 20:case'end':return _context.stop();}}},null,_this);};

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL29hdXRoMkxvZ2luQWRhcHRlci5qcyJdLCJuYW1lcyI6WyJ1cmxQYXJzZSIsInJlcXVpcmUiLCJTQUxFU0ZPUkNFX0NBTExCQUNLX1VSTCIsIk9BVVRIX0dFVF9UT0tFTl9HUkFOVF9UWVBFIiwiUEFSQU1FVEVSX0RFRkFVTFRTIiwiY2FsbGJhY2tVcmwiLCJzY29wZSIsImJ1aWxkT0F1dGgyTG9naW5VUkwiLCJwYXJhbWV0ZXJzIiwic3RhdGUiLCJ1cmxQYXJhbWV0ZXJzIiwiY2xpZW50X2lkIiwiY29uc3VtZXJLZXkiLCJyZWRpcmVjdF91cmkiLCJyZXNwb25zZV90eXBlIiwicmVzcG9uc2VUeXBlIiwidXJsUGFyYW1ldGVyc1N0ciIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJtYXAiLCJrZXkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJqb2luIiwiYXV0aG9yaXplVXJsIiwiZmV0Y2hBY2Nlc3NUb2tlbiIsImNvZGUiLCJmZXRjaFBhcmFtcyIsImNsaWVudF9zZWNyZXQiLCJjb25zdW1lclNlY3JldCIsImdyYW50X3R5cGUiLCJmb3JtIiwia2V5cyIsImsiLCJmZXRjaCIsImFjY2Vzc1Rva2VuVXJsIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJtb2R1bGUiLCJleHBvcnRzIiwibG9naW5Vc2VyIiwicGFyYW1ldGVyc1dpdGhEZWZhdWx0cyIsInJlcGxhY2UiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJ3ZWJMb2dpblVSTCIsInBhcnNlZCIsInF1ZXJ5IiwiRXJyb3IiLCJvYXV0aENvZGUiLCJmZXRjaFJlc3VsdCIsIm9rIiwianNvbiJdLCJtYXBwaW5ncyI6IitPQUFBLEdBQU1BLFVBQVdDLFFBQVEsV0FBUixDQUFqQjs7QUFFQSxHQUFNQyx5QkFBMEIseUNBQWhDO0FBQ0EsR0FBTUMsNEJBQTZCLG9CQUFuQzs7QUFFQSxHQUFNQyxvQkFBcUI7QUFDekJDLFlBQWFILHVCQURZO0FBRXpCSSxNQUFPLG1CQUZrQixDQUEzQjs7O0FBS0EsUUFBU0Msb0JBQVQsQ0FBNkJDLFVBQTdCLENBQXlDQyxLQUF6QyxDQUFnRDtBQUM5QyxHQUFNQyxlQUFnQjtBQUNwQkMsVUFBV0gsV0FBV0ksV0FERjtBQUVwQkMsYUFBY0wsV0FBV0gsV0FGTDtBQUdwQlMsY0FBZU4sV0FBV08sWUFITjtBQUlwQlQsTUFBT0UsV0FBV0YsS0FKRTtBQUtwQkcsV0FMb0IsQ0FBdEI7OztBQVFBLEdBQU1PLGtCQUFtQkM7QUFDdEJDLG1CQURzQixDQUNGUixhQURFO0FBRXRCUyxHQUZzQixDQUVsQixTQUFDQyxHQUFELFFBQVlBLElBQVosS0FBbUJDLG1CQUFtQlgsY0FBY1UsR0FBZCxDQUFuQixDQUFuQixFQUZrQjtBQUd0QkUsSUFIc0IsQ0FHakIsR0FIaUIsQ0FBekI7O0FBS0EsTUFBVWQsWUFBV2UsWUFBckIsS0FBcUNQLGdCQUFyQztBQUNEOztBQUVELFFBQVNRLGlCQUFULENBQTBCaEIsVUFBMUIsQ0FBc0NpQixJQUF0QyxDQUE0QztBQUN4QyxHQUFNQyxhQUFjO0FBQ2hCQyxjQUFlbkIsV0FBV29CLGNBRFY7QUFFaEJDLFdBQVkxQiwwQkFGSTtBQUdoQnNCLFNBSGdCO0FBSWhCZCxVQUFXSCxXQUFXSSxXQUpOO0FBS2hCQyxhQUFjTCxXQUFXSCxXQUxULENBQXBCOztBQU9BLEdBQU15QixNQUFPYixPQUFPYyxJQUFQLENBQVlMLFdBQVosRUFBeUJQLEdBQXpCLENBQTZCLFNBQUNhLENBQUQsUUFBU0EsRUFBVCxLQUFjWCxtQkFBbUJLLFlBQVlNLENBQVosQ0FBbkIsQ0FBZCxFQUE3QixFQUFpRlYsSUFBakYsQ0FBc0YsR0FBdEYsQ0FBYjs7QUFFQSxNQUFPVyxPQUFNekIsV0FBVzBCLGNBQWpCLENBQWlDO0FBQ3BDQyxPQUFRLE1BRDRCO0FBRXBDQyxRQUFTO0FBQ0wsU0FBVSxrQkFETDtBQUVMLGVBQWdCLGtEQUZYLENBRjJCOztBQU1wQ0MsS0FBTVAsSUFOOEIsQ0FBakMsQ0FBUDs7O0FBU0g7O0FBRURRLE9BQU9DLE9BQVAsQ0FBaUIsU0FBQ0MsU0FBRCxDQUFlO0FBQzlCLE1BQU8sa0JBQU9oQyxVQUFQOztBQUVDaUMsc0JBRkQsYUFFOEJqQyxVQUY5QixDQUU2Q0osa0JBRjdDOzs7QUFLQ0ssS0FMRCxDQUtTLG1DQUFtQ2lDLE9BQW5DLENBQTJDLElBQTNDLENBQWlELGlCQUFNLENBQUMsRUFBRUMsS0FBS0MsTUFBTCxHQUFjLEVBQWpCLEVBQXFCQyxRQUFyQixDQUE4QixFQUE5QixDQUFOLEVBQWpELENBTFQ7OztBQVFDQyxXQVJELENBUWV2QyxvQkFBb0JrQyxzQkFBcEIsQ0FBNENoQyxLQUE1QyxDQVJmOzs7QUFXcUIrQixVQUFVTSxXQUFWLENBQXVCTCx1QkFBdUJwQyxXQUE5QyxDQVhyQixTQVdDQSxXQVhEOztBQWFDMEMsTUFiRCxDQWFVL0MsU0FBU0ssV0FBVCxDQUFzQixJQUF0QixDQWJWOztBQWVEMEMsT0FBT0MsS0FBUCxDQUFhdkMsS0FBYixHQUF1QkEsS0FmdEI7QUFnQkcsR0FBSXdDLE1BQUosb0RBQTZEeEMsS0FBN0QsZ0JBQWlGc0MsT0FBT0MsS0FBUCxDQUFhdkMsS0FBOUYsQ0FoQkg7OztBQW1CQ3lDLFNBbkJELENBbUJhSCxPQUFPQyxLQUFQLENBQWF2QixJQW5CMUI7O0FBcUJBeUIsU0FyQkE7QUFzQkcsR0FBSUQsTUFBSixDQUFVLDZCQUFWLENBdEJIOzs7QUF5QnNCekIsaUJBQWlCaUIsc0JBQWpCLENBQXlDUyxTQUF6QyxDQXpCdEIsVUF5QkNDLFdBekJEOztBQTJCQUEsWUFBWUMsRUEzQlo7QUE0QkdELFdBNUJIOzs7QUErQlFBLFlBQVlFLElBQVosRUEvQlIsbUhBQVA7O0FBaUNELENBbENEIiwiZmlsZSI6Im9hdXRoMkxvZ2luQWRhcHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHVybFBhcnNlID0gcmVxdWlyZSgndXJsLXBhcnNlJyk7XG5cbmNvbnN0IFNBTEVTRk9SQ0VfQ0FMTEJBQ0tfVVJMID0gJ29hdXRoLXN3aWZ0Oi8vb2F1dGgtY2FsbGJhY2svc2FsZXNmb3JjZSdcbmNvbnN0IE9BVVRIX0dFVF9UT0tFTl9HUkFOVF9UWVBFID0gJ2F1dGhvcml6YXRpb25fY29kZSdcblxuY29uc3QgUEFSQU1FVEVSX0RFRkFVTFRTID0ge1xuICBjYWxsYmFja1VybDogU0FMRVNGT1JDRV9DQUxMQkFDS19VUkwsXG4gIHNjb3BlOiAnYXBpIHJlZnJlc2hfdG9rZW4nXG59XG5cbmZ1bmN0aW9uIGJ1aWxkT0F1dGgyTG9naW5VUkwocGFyYW1ldGVycywgc3RhdGUpIHtcbiAgY29uc3QgdXJsUGFyYW1ldGVycyA9IHtcbiAgICBjbGllbnRfaWQ6IHBhcmFtZXRlcnMuY29uc3VtZXJLZXksXG4gICAgcmVkaXJlY3RfdXJpOiBwYXJhbWV0ZXJzLmNhbGxiYWNrVXJsLFxuICAgIHJlc3BvbnNlX3R5cGU6IHBhcmFtZXRlcnMucmVzcG9uc2VUeXBlLFxuICAgIHNjb3BlOiBwYXJhbWV0ZXJzLnNjb3BlLFxuICAgIHN0YXRlXG4gIH1cblxuICBjb25zdCB1cmxQYXJhbWV0ZXJzU3RyID0gT2JqZWN0XG4gICAgLmdldE93blByb3BlcnR5TmFtZXModXJsUGFyYW1ldGVycylcbiAgICAubWFwKChrZXkpID0+IGAke2tleX09JHtlbmNvZGVVUklDb21wb25lbnQodXJsUGFyYW1ldGVyc1trZXldKX1gKVxuICAgIC5qb2luKCcmJylcblxuICByZXR1cm4gYCR7cGFyYW1ldGVycy5hdXRob3JpemVVcmx9PyR7dXJsUGFyYW1ldGVyc1N0cn1gXG59XG5cbmZ1bmN0aW9uIGZldGNoQWNjZXNzVG9rZW4ocGFyYW1ldGVycywgY29kZSkge1xuICAgIGNvbnN0IGZldGNoUGFyYW1zID0ge1xuICAgICAgICBjbGllbnRfc2VjcmV0OiBwYXJhbWV0ZXJzLmNvbnN1bWVyU2VjcmV0LFxuICAgICAgICBncmFudF90eXBlOiBPQVVUSF9HRVRfVE9LRU5fR1JBTlRfVFlQRSxcbiAgICAgICAgY29kZSxcbiAgICAgICAgY2xpZW50X2lkOiBwYXJhbWV0ZXJzLmNvbnN1bWVyS2V5LFxuICAgICAgICByZWRpcmVjdF91cmk6IHBhcmFtZXRlcnMuY2FsbGJhY2tVcmxcbiAgICB9XG4gICAgY29uc3QgZm9ybSA9IE9iamVjdC5rZXlzKGZldGNoUGFyYW1zKS5tYXAoKGspPT4gYCR7a309JHtlbmNvZGVVUklDb21wb25lbnQoZmV0Y2hQYXJhbXNba10pfWApLmpvaW4oJyYnKTtcbiAgICBcbiAgICByZXR1cm4gZmV0Y2gocGFyYW1ldGVycy5hY2Nlc3NUb2tlblVybCwge1xuICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04J1xuICAgICAgICB9LFxuICAgICAgICBib2R5OiBmb3JtXG4gICAgfSk7ICAgIFxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gKGxvZ2luVXNlcikgPT4ge1xuICByZXR1cm4gYXN5bmMgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgIGNvbnN0IHBhcmFtZXRlcnNXaXRoRGVmYXVsdHMgPSB7Li4ucGFyYW1ldGVycywgLi4uUEFSQU1FVEVSX0RFRkFVTFRTfVxuXG4gICAgLy8gR2VuZXJhdGUgcmFuZG9tIHN0YXRlIGZvciBPQXV0aDIgbG9naW5cbiAgICBjb25zdCBzdGF0ZSA9ICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcucmVwbGFjZSgvMC9nLCAoKSA9PiAoMHxNYXRoLnJhbmRvbSgpKjE2KS50b1N0cmluZygxNikpXG5cbiAgICAvLyBCdWlsZCBsb2dpbiBVUkxcbiAgICBjb25zdCB3ZWJMb2dpblVSTCA9IGJ1aWxkT0F1dGgyTG9naW5VUkwocGFyYW1ldGVyc1dpdGhEZWZhdWx0cywgc3RhdGUpXG5cbiAgICAvLyBDYWxsIGJyb3dzZXIsIGF3YWl0IGZvciBsb2cgaW4gaW50byBzYWxlc2ZvcmNlLlxuICAgIGNvbnN0IGNhbGxiYWNrVXJsID0gYXdhaXQgbG9naW5Vc2VyKHdlYkxvZ2luVVJMLCBwYXJhbWV0ZXJzV2l0aERlZmF1bHRzLmNhbGxiYWNrVXJsKVxuXG4gICAgY29uc3QgcGFyc2VkID0gdXJsUGFyc2UoY2FsbGJhY2tVcmwsIHRydWUpXG5cbiAgICBpZiAocGFyc2VkLnF1ZXJ5LnN0YXRlICE9PSBzdGF0ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBPQXV0aDIgcmVzcG9uc2Ugc3RhdGUgZG9lcyBub3QgbWF0Y2guIEV4cGVjdGVkOiAke3N0YXRlfSwgcmVjZWl2ZWQ6ICR7cGFyc2VkLnF1ZXJ5LnN0YXRlfWApXG4gICAgfVxuXG4gICAgY29uc3Qgb2F1dGhDb2RlID0gcGFyc2VkLnF1ZXJ5LmNvZGVcbiAgICBcbiAgICBpZiAoIW9hdXRoQ29kZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPQXV0aDIgcmVzcG9uc2UgaGFzIG5vIGNvZGUnKTtcbiAgICB9XG5cbiAgICBjb25zdCBmZXRjaFJlc3VsdCA9ICBhd2FpdCBmZXRjaEFjY2Vzc1Rva2VuKHBhcmFtZXRlcnNXaXRoRGVmYXVsdHMsIG9hdXRoQ29kZSk7XG5cbiAgICBpZiAoIWZldGNoUmVzdWx0Lm9rKSB7XG4gICAgICB0aHJvdyBmZXRjaFJlc3VsdDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgZmV0Y2hSZXN1bHQuanNvbigpO1xuICB9XG59OyJdfQ==